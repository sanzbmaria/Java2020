import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

// Template code of "PA1.java"
// Do not change the format of the class and method in "PA1.java"
// Do not use java.util.LinkedList package

class Node<T> {
    T value = null;

    Node<T> prev = null;
    Node<T> next = null;

    Node (T val) {
        this.value = val;
    }
}

class Linkedlist<T> {
    Node<T> head = null;
    Node<T> tail = null;

    void addList(Linkedlist<T> list) {
        Node current = head;
        while (current.next != null){
            current = current.next;
        }
        current.next = list.head;
    } //DONE •Add ‘list’ after the list

    boolean equals(Linkedlist<T> list) {
        Node current = head;
        Node current2 = list.head;
        if(current.value != current2.value){
            System.out.println("Entered 1st condition");
            return false;
        }
        else if(current.value == null && current2.value == null) {
            System.out.println("Entered 2nd condition");
            return true;
        }
        else{
            while(current.next != null && current2.next != null){
                if(current.value == current2.value){
                    current = current.next;
                    current2 = current2.next;
                }
                else {
                    return false;
                }
            }

            if(current.value == current2.value)
                return true;
            else
                return false;
        }

    } //DONE • Compare the contents of two lists. Return true if all	contents and order are same.
    int size() {
        int size = 1;
        Node current = head;
        while (current.next != null){
            current = current.next;
            size+=1;
        }
        return size;
    } // DONE • Return size of the list

    void push_back(T val) {
        Node node = new Node(val);
        node.next = null;

        if(head == null){
            head = node;
            tail = node;
            node.prev = null;
        } //check if the list is empty
        else{
            tail.next = node;
            node.prev = tail;
            tail = node;
        }
    } //DONE • Push element ‘val’ back or front of the linked list

    void push_front(T val) {
        Node node = new Node(val);
        node.next = null;

        if(head == null){
            head = node;
            node.prev = null;
        } //check if the list is empty and insert it as head
        else{
            node.next = head; //set the two links
            head.prev = node;

            head = node; //update new head value
            node.prev = null;
        }
    } //DONE • Push element ‘val’ back or front of the linked list

    String print_list() {
        Node<T> tmp = this.head;
        String res = "";
        while(tmp != null) {
            System.out.print(tmp.value + " ");
            res = res + tmp.value.toString() + " ";
            tmp = tmp.next;
        }
        System.out.println();
        return res;
    }

    T get(int n) {

    try {
        if(n >= size()){
            throw new OutOfRangeException("Please choose a number that is smaller than the list size.");
        }
    }catch (OutOfRangeException e){
        System.out.println(e.getMessage());
        System.exit(1);
    }
        int counter = 0;
        Node current = head;
        while(counter != n){
            current = current.next;
            counter++;
        }
        T value = (T) current.value;
        return value;
    } // DONE • Return the value of the ‘n’th element of the list

    void set(int n, T val) {
        if(n >= size()){
            //do nothing?
        }
        else{
            int counter = 0;
            Node current = head;
            while(counter < n){
                current = current.next;
                counter++;
            }
            current.value = val;
        }

    } //DONE • Set the value of the ‘n’th element of the list to ‘val’ ✓ index of list is started from 0 ✓ if size of list is equal or less than 'n', do nothing

    void add(int n, T val) {
        if(n >= size()){
            //do nothing?
        }
        else{
            int counter = 0;
            Node current = head;
            while(counter != n){
                current = current.next;
                counter++;
            }

            Node node = new Node(val); //create the new node
            node.next = current;

            if(current != head){ //if it is NOT the first item
                Node prev = current.prev;
                prev.next = node;
                node.prev = prev;
                current.prev = node;
            }
            else if(current == head){ //if it is the first item
                current.prev = node;
                node.prev = null;
                head = node;
            }


        }
    } //DONE • Add new node at index ‘n’ ✓ index of list is started from 0 ✓ if size of list is equal or less than 'n', do nothing

    void erase (int n) {
        if(n >= size()){
            //do nothing?;
        }
        else{
            int counter = 0;
            Node current = head;
            while(counter != n){
                current = current.next;
                counter++;
            }

            if(current == head){ //if it is the first item
                head = current.next ;
                head.prev = null;
                current.next = null;
            }
            else if(current.next == null){ //if it is the last item
                current.prev.next = null;
                current.prev = null;
            }
            else{ //middle items
                current.prev.next = current.next;
                current.next.prev = current.prev;

                current.prev = null;
                current.next = null;
            }

        }
    } //DONE • Erase and delete the node at index ‘n’ ✓ index of list is started from 0 ✓ if size of list is equal or less than 'n', do nothing

    void pop_back() {
        if(head == null){
            //do nothing?
        } //check if the list is empty if so do nothing

        else{
            Node prev = tail.prev;
            prev.next = null;
            tail.prev = null;
            tail = prev;
        }
    } //DONE • Pop ‘val’ from back or front of the linked list If there is no element in list, do nothing
    void pop_front() {

        if(head == null){
            //do nothing?
        } //check if the list is empty if so do nothing

        else{
            Node node = head.next;
            node.prev = null;
            head.next = null;
            head = node;
        }
    } //DONE • Pop ‘val’ from back or front of the linked list If there is no element in list, do nothing

    List<Linkedlist<T>> split(T val) {
        List<Linkedlist<T>> arr = new ArrayList<Linkedlist<T>>();

        Linkedlist first = new Linkedlist();
        Linkedlist second = new Linkedlist();

        Node current = head;

        while(current != null){
            if(current.value == val){
                break;
            } else{
                first.push_back(current.value);
                current = current.next;
            }
        }

        while (current != null){
            second.push_back(current.value);
            current = current.next;
        }
        first.print_list();
        second.print_list();

        arr.add(first);
        arr.add(second);

        return arr;

    } //FIX •Split a linked list into multiple lists using the specified delimiter 'val’. • If no element ‘val’ is exist, return List that consists entire linked list.
    Linkedlist() {}

    Linkedlist(T val) {
        head = new Node<T>(val);
        tail = head;
    }
}



public class PA1 {
    public static void main(String[] args) {
        // example of using Linkedlist with generic type
        Linkedlist<Integer> list = new Linkedlist<Integer>();

        list.push_back(3);
        //list.print_list();

        list.push_back(2);
        //list.print_list();

        list.push_back(1);
        //list.print_list();

        list.push_back(0);
        list.print_list();



        ///////
        Linkedlist<Integer> list1 = new Linkedlist<Integer>();

        list1.push_back(4);
        //list1.print_list();

        list1.push_back(5);
        //list1.print_list();

        list1.push_back(6);
        //list1.print_list();

        list1.push_back(7);
        //list1.print_list();

        //list.addList(list1);
        //list.print_list();
        ////

       list.split(2);
       list.print_list();

        Scanner scan = new Scanner(System.in);
        


    }
}

class OutOfRangeException extends  Exception{
    public OutOfRangeException(String message){
        super(message);
    }
}
